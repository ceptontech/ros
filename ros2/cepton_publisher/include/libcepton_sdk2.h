#pragma once

// Warning, this file is autogenerated by cbindgen. Don't modify this manually.

#include <stddef.h>
#include <stdint.h>

#define CEPTON_API_VERSION 205

#define CEPTON_SUCCESS 0

#define CEPTON_ERROR_GENERIC -1

#define CEPTON_ERROR_OUT_OF_MEMORY -2

#define CEPTON_ERROR_SENSOR_NOT_FOUND -4

#define CEPTON_ERROR_SDK_VERSION_MISMATCH -5

#define CEPTON_ERROR_COMMUNICATION -6

#define CEPTON_ERROR_TOO_MANY_CALLBACKS -7

#define CEPTON_ERROR_INVALID_ARGUMENTS -8

#define CEPTON_ERROR_ALREADY_INITIALIZED -9

#define CEPTON_ERROR_NOT_INITIALIZED -10

#define CEPTON_ERROR_INVALID_FILE_TYPE -11

#define CEPTON_ERROR_FILE_IO -12

#define CEPTON_ERROR_CORRUPT_FILE -13

#define CEPTON_ERROR_NOT_OPEN -14

#define CEPTON_ERROR_EOF -15

#define CEPTON_ERROR_NOT_SUPPORTED -16

#define CEPTON_ERROR_INVALID_RESPONSE -17

#define CEPTON_ERROR_INVALID_STATE -18

#define CEPTON_ERROR_NOT_ENABLED -19

#define CEPTON_ERROR_TIMEOUT -20

#define CEPTON_MODEL_VISTA_860_GEN2 7

#define CEPTON_MODEL_VISTA_X120 10

#define CEPTON_MODEL_SORA_P60 11

#define CEPTON_MODEL_VISTA_P60 12

#define CEPTON_MODEL_VISTA_P90 14

#define CEPTON_MODEL_SORA_P90 15

#define CEPTON_MODEL_VISTA_P61 16

#define CEPTON_MODEL_SORA_P61 17

#define CEPTON_MODEL_NOVA_A 18

#define CEPTON_MODEL_APEX90 22

#define CEPTON_MODEL_VISTA_X90 24

#define CEPTON_MODEL_NOVA_B1 25

#define CEPTON_MODEL_TERA_TALL 26

#define CEPTON_MODEL_TERA_SHORT 27

#define CEPTON_MODEL_SORA_X90 28

#define CEPTON_MODEL_NOVA_B2 30

#define CEPTON_MODEL_TERA_A2 31

#define CEPTON_MODEL_VISTA_X90_PLUS 32

#define CEPTON_REPLAY_FLAG_LOAD_WITHOUT_INDEX 1

#define CEPTON_REPLAY_FLAG_PLAY_LOOPED 2

#define CEPTON_REPLAY_FLAG_LOAD_PAUSED 4

#define CEPTON_SENSOR_PTP_CONNECTED 1

#define CEPTON_SENSOR_PPS_CONNECTED 2

#define CEPTON_SENSOR_NMEA_CONNECTED 4

#define CEPTON_POINT_SATURATED 1

#define CEPTON_POINT_BLOOMING 2

#define CEPTON_POINT_FRAME_PARITY 4

#define CEPTON_POINT_FRAME_BOUNDARY 8

#define CEPTON_POINT_SECOND_RETURN 16

#define CEPTON_POINT_NO_RETURN 32

#define CEPTON_POINT_NOISE 64

#define CEPTON_POINT_BLOCKED 128

#define CEPTON_AGGREGATION_MODE_NATURAL 0

#define CEPTON_AGGREGATION_MODE_FIXED_10Hz 100000

#define CEPTON_FAULT_SUMMARY_DATA_RATIONALITY 1

#define CEPTON_FAULT_SUMMARY_DATA_CHECKSUM 2

#define CEPTON_FAULT_SUMMARY_TEMPERATURE_RANGE 4

#define CEPTON_FAULT_SUMMARY_VOLTAGE_RANGE 8

struct CeptonPointData;

struct CeptonPointExData;

typedef uint64_t CeptonSensorHandle;

typedef void (*CeptonSensorErrorCallback)(CeptonSensorHandle handle,
                                          int error_code,
                                          const char *error_msg,
                                          const void *error_data,
                                          size_t error_data_size);

typedef uint64_t CeptonReplayHandle;

typedef void (*CeptonParserCallback)(CeptonSensorHandle handle,
                                     int64_t timestamp,
                                     const uint8_t *data,
                                     size_t data_size,
                                     void *user_data);

struct CeptonSensor {
  uint32_t info_size;
  uint32_t serial_number;
  CeptonSensorHandle handle;
  unsigned char model_name[28];
  uint16_t model;
  uint16_t model_reserved;
  uint32_t part_number;
  uint32_t firmware_version;
  uint64_t power_up_timestamp;
  uint64_t time_sync_offset;
  uint64_t time_sync_drift;
  uint8_t return_count;
  uint8_t channel_count;
  uint16_t channel_count_u16;
  uint32_t status_flags;
  uint16_t temperature;
  uint8_t sku;
  uint8_t padding;
  uint32_t fault_summary;
  uint8_t fault_entries[32];
  uint8_t header_ext[64];
  uint8_t payload[1472];
};

typedef void (*CeptonSensorInfoCallback)(CeptonSensorHandle handle,
                                         const struct CeptonSensor *info,
                                         void *user_data);

struct CeptonPointEx {
  int32_t x;
  int32_t y;
  int32_t z;
  uint16_t reflectivity;
  uint16_t relative_timestamp;
  uint16_t flags;
  uint16_t channel_id;     // ORG is flags then channel_id
};

typedef void (*CeptonPointsExCallback)(CeptonSensorHandle handle,
                                       int64_t start_timestamp,
                                       size_t n_points,
                                       const struct CeptonPointEx *points,
                                       void *user_data);

struct CeptonPanicMessage {
  CeptonSensorHandle handle;
  uint32_t serial_number;
  uint32_t fault_identity;
  uint32_t life_counter;
  uint8_t padding[4];
  uint64_t ptp_timestamp;
};

typedef void (*CeptonSensorPanicCallback)(CeptonSensorHandle handle,
                                          const struct CeptonPanicMessage *panic_packet,
                                          void *user_data);

typedef void (*CeptonPointsCallback)(CeptonSensorHandle handle,
                                     int64_t timestamp,
                                     size_t n_points,
                                     size_t stride,
                                     const uint8_t *points,
                                     void *user_data);

typedef void (*CeptonSerialReceiveCallback)(CeptonSensorHandle handle,
                                            const char *str,
                                            void *user_data);

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

const char *CeptonGetErrorCodeName(int error_code);

uint32_t CeptonGetSdkVersion(void);

int CeptonIsInitialized(void);

int CeptonInitialize(uint32_t api_version, CeptonSensorErrorCallback cb);

int CeptonDeinitialize(void);

int CeptonStartNetworking(void);

int CeptonStartNetworkingOnPort(uint16_t port);

int CeptonStartNetworkingUnicast(const char *local_if_address, uint16_t port);

int CeptonStartNetworkingMulticast(const char *target_mcast_group,
                                   const char *local_if_address,
                                   uint16_t port);

int CeptonStopNetworking(void);

int CeptonSetSdkControlFlags(uint32_t control_flags);

uint32_t CeptonGetSdkControlFlags(void);

int CeptonReplayLoadPcap(const char *pcap_file_name,
                         uint32_t flags,
                         CeptonReplayHandle *handle);

int CeptonReplayUnloadPcap(CeptonReplayHandle handle);

int CeptonReplayUnloadAll(void);

int CeptonReplayPlay(CeptonReplayHandle handle);

int CeptonReplayPlayToFinish(CeptonReplayHandle handle);

int CeptonReplayPause(CeptonReplayHandle handle);

int64_t CeptonReplayGetLength(CeptonReplayHandle handle);

int CeptonReplayStartIndexing(CeptonReplayHandle handle);

int CeptonReplaySeek(CeptonReplayHandle handle, int64_t position);

int64_t CeptonReplayGetSeekPosition(CeptonReplayHandle handle);

int CeptonReplayNextFrame(CeptonReplayHandle handle);

int CeptonReplaySetAutoReplay(CeptonReplayHandle handle, int auto_replay);

int CeptonReplaySetSpeed(CeptonReplayHandle handle, int speed);

int CeptonReplayGetSpeed(CeptonReplayHandle handle);

int64_t CeptonReplayGetIndexPosition(CeptonReplayHandle handle);

int CeptonReplayIsFinished(CeptonReplayHandle handle);

int CeptonReplayIsPaused(CeptonReplayHandle handle);

int CeptonRegisterParser(CeptonParserCallback callback, void *user_data);

int CeptonUnregisterParser(CeptonParserCallback callback, void *user_data);

int CeptonGetSensorCount(void);

int CeptonGetSensorInformationByIndex(size_t idx, struct CeptonSensor *info);

int CeptonGetSensorInformation(CeptonSensorHandle handle,
                               struct CeptonSensor *info);

int CeptonGetSensorInformationBySerialNumber(uint32_t serial_number,
                                             struct CeptonSensor *info);

int CeptonListenSensorInfo(CeptonSensorInfoCallback callback, void *user_data);

int CeptonUnlistenSensorInfo(CeptonSensorInfoCallback callback,
                             void *user_data);

int CeptonListenPointsEx(CeptonPointsExCallback callback, void *user_data);

int CeptonUnlistenPointsEx(CeptonPointsExCallback callback, void *user_data);

int CeptonListenFramesEx(int aggregation_mode,
                         CeptonPointsExCallback callback,
                         void *user_data);

int CeptonUnlistenFramesEx(CeptonPointsExCallback callback, void *user_data);

int CeptonListenPanic(CeptonSensorPanicCallback callback, void *user_data);

int CeptonUnlistenPanic(CeptonSensorPanicCallback callback, void *user_data);

int CeptonClearPointDataPipeline(void);

int CeptonClearSensorInformationCache(void);

int CeptonStartAsyncRelay(int buffer_count);

int CeptonStopAsyncRelay(void);

int CeptonReceiveData(CeptonSensorHandle handle,
                      int64_t timestamp,
                      const uint8_t *buffer,
                      size_t buffer_size);

int CeptonAddSensorInfo(CeptonSensorHandle handle,
                        const struct CeptonSensor *info);

int CeptonAddPoints(CeptonSensorHandle handle,
                    int64_t timestamp,
                    size_t count,
                    size_t stride,
                    const uint8_t *points);

int CeptonAddPointsEx(CeptonSensorHandle handle,
                      int64_t timestamp,
                      size_t count,
                      const struct CeptonPointEx *points);

int CeptonListenPoints(CeptonPointsCallback callback, void *user_data);

int CeptonUnlistenPoints(CeptonPointsCallback callback, void *user_data);

int CeptonListenFrames(int aggregation_mode,
                       CeptonPointsCallback callback,
                       void *user_data);

int CeptonUnlistenFrames(CeptonPointsCallback callback, void *user_data);

int CeptonListenSerialLines(CeptonSerialReceiveCallback callback,
                            void *user_data);

int CeptonUnlistenSerialLines(CeptonSerialReceiveCallback callback,
                              void *user_data);

int CeptonEnableLegacyTranslation(void);

int CeptonDisableLegacyTranslation(void);

int CeptonEnableFrameFifoEx(int aggregation_mode, unsigned int frame_count);

int CeptonDisableFrameFifoEx(void);

int CeptonFrameFifoExGet(const struct CeptonPointExData *point_data,
                         int max_wait_time);

                         int CeptonFrameFifoExNext(void);

int CeptonFrameFifoExEmpty(void);

int CeptonFrameFifoExSize(void);

int CeptonFrameFifoExFull(void);

int CeptonEnableFrameFifo(int aggregation_mode, unsigned int n_frames);

int CeptonDisableFrameFifo(void);

int CeptonFrameFifoGet(const struct CeptonPointData *point_data,
                       int max_wait_time);

int CeptonFrameFifoPutBack(void);

int CeptonFrameFifoRelease(void);

int CeptonFrameFifoEmpty(void);

int CeptonFrameFifoSize(void);

int CeptonFrameFifoFull(void);

int CeptonPcapWriterOpen(const char *pcap_file);

int CeptonPcapWriterClose(void);

int CeptonPcapWriterStart(void);

int CeptonPcapWriterStop(void);

int CeptonPcapWriterWriteUdpPacket(CeptonSensorHandle handle,
                                   const uint8_t *data,
                                   size_t data_len,
                                   int64_t timestamp);

#ifdef __cplusplus
}  // extern "C"
#endif  // __cplusplus
